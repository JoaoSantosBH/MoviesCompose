package plugins


tasks.withType<Test> {
    extensions.configure(JacocoTaskExtension::class) {
        isIncludeNoLocationClasses = true
        excludes = listOf("jdk.internal.*","**/google/**/*.*",)
    }
}

private val fileFilter = mutableSetOf(
    // data binding
    "android/databinding//*.class",
    "/android/databinding/*Binding.class",
    "/android/databinding/*",
    "/androidx/databinding/*",
    "/BR.*",
    // android
    "/R.class",
    "/R$*.class",
    "/BuildConfig.*",
    "/Manifest*.*",
    "/*Test*.*",
    "android//*.*",
    // dagger
    "/*_MembersInjector.class",
    "/Dagger*Component.class",
    "/Dagger*Component\$Builder.class",
    "/Dagger*Subcomponent*.class",
    "/*Subcomponent\$Builder.class",
    "/*Module_*Factory.class",
    "/di/module/*",
    "/*_Factory*.*",
    "/*Module*.*",
    "/*Dagger*.*",
    "/*Hilt*.*",
    // kotlin
    "/*MapperImpl*.*",
    "/*\$ViewInjector*.*",
    "/*\$ViewBinder*.*",
    "/BuildConfig.*",
    "/*Component*.*",
    "/*BR*.*",
    "/Manifest*.*",
    "/*\$Lambda$*.*",
    "/*Companion*.*",
    "/*Module*.*",
    "/*Dagger*.*",
    "/*Hilt*.*",
    "/*MembersInjector*.*",
    "/*_MembersInjector.class",
    "/*_Factory*.*",
    "/*_Provide*Factory*.*",
    "/*Extensions*.*",
    // sealed and data classes
    "/*$Result.*",
    "/*$Result$*.*",
    // adapters generated by moshi
    "/*JsonAdapter.*"
)

private val classDirectoriesTree = fileTree(project.buildDir) {
    include(
        "**/classes/**/main/**",
        "**/intermediates/classes/debug/**",
        "**/intermediates/javac/debug/*/classes/**", // Android Gradle Plugin 3.2.x support.
        "**/tmp/kotlin-classes/debug/**"
    )

    exclude(fileFilter)
}

private val sourceDirectoriesTree = fileTree("${project.buildDir}") {
    include(
        "src/main/java/**",
        "src/main/kotlin/**",
        "src/debug/java/**",
        "src/debug/kotlin/**"
    )
}

private val executionDataTree = fileTree(project.buildDir) {
    include(
        "outputs/code_coverage/**/*.ec",
        "jacoco/jacocoTestReportDebug.exec",
        "jacoco/testDebugUnitTest.exec",
        "jacoco/test.exec"
    )
}

fun JacocoReportsContainer.reports() {
    xml.required.set(false)
    html.required.set(true)
    html.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoTestReport/html"))
}

fun JacocoCoverageVerification.setDirectories() {
    sourceDirectories.setFrom(sourceDirectoriesTree)
    classDirectories.setFrom(classDirectoriesTree)
    executionData.setFrom(executionDataTree)
}

fun JacocoReport.setDirectories() {
    sourceDirectories.setFrom(sourceDirectoriesTree)
    classDirectories.setFrom(classDirectoriesTree)
    executionData.setFrom(executionDataTree)
}


if (tasks.findByName("jacocoReport") == null) {

    tasks.register<JacocoReport>("jacocoReport") {
        group = "versioning"
        description = "Code coverage report for both Android and Unit tests."
        dependsOn("testDebugUnitTest", "createDebugCoverageReport")
        reports {
            reports()
        }
        setDirectories()
    }
}

if (tasks.findByName("jacocoCoverage") == null) {
    tasks.register<JacocoCoverageVerification>("jacocoCoverage") {
        group = "versioning"
        description = "Code coverage verification for Android both Android and Unit tests."
        dependsOn("testDebugUnitTest", "createDebugCoverageReport")
        violationRules {
            rule {
                limit {
                    counter = "INSTRUCTION"
                    value = "COVEREDRATIO"
                    minimum = "0.3".toBigDecimal()
                }
            }
        }
        setDirectories()
    }
}